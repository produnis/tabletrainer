---
description: "Lösungswege zu den Übungsaufgaben für das data.table Paket"
format:
  buechlein-html:
    include-in-header: "vgwort/loesungen.html"
    #aliases: 
    #- Kapitel-Tidyverse.html
---

# Lösungswege {#sec-LoesungAnfang}

::: {.callout-warning appearance="simple"}
Gerade als Anfänger:in sollten Sie zumindest *versuchen*, die Aufgaben selbstständig zu lösen, bevor Sie sich die Lösungswege anschauen. Kopf hoch, Sie schaffen das!
:::

## Lösung zur Aufgabe [-@sec-AAA00] Größe und Gewicht {#sec-LAA00}
::: {.callout-tip}
## a) Überführen Sie die Daten in eine `data.table` mit den Variablen `Groesse` und `Gewicht`.

```{r}
#| label: LoesungAA00a
# Paket aktivieren
library(data.table)

# Überführe in eine data.table
dt <- data.table(Groesse = c(1.68, 1.87, 1.95, 1.74, 1.80, 1.75, 1.59, 
                             1.77, 1.82, 1.74),
                 Gewicht = c(78500, 110100, 97500, 69200, 82500, 71500, 
                             81500, 87200, 75500, 65500)
)

# anzeigen
dt
```

:::

\smallskip\  

::: {.callout-tip}
## b) Rechnen Sie das Gewicht um in Kilogramm, und speichern Sie Ihr Ergebnis in der neuen Variable `Kilogramm`

```{r}
#| label: LoesungAA00b
# Umrechnen in Kilogramm
dt[, Kilogramm := Gewicht / 1000]

# anzeigen
dt
```

:::

\smallskip\  

::: {.callout-tip}
## c) Lassen Sie die Daten von Proband 4, 7 und 9 ausgeben

```{r}
#| label: LoesungAA00c
# Ausgabe der Daten von Proband 4, 7 und 9
dt[c(4, 7, 9)]
```

:::

\smallskip\  

::: {.callout-tip}
## d) Lassen Sie die Daten der Probanden ausgeben, deren Gewicht größer ist als 80kg

```{r}
#| label: LoesungAA00d
dt[Kilogramm > 80]
```

:::

\smallskip\  

::: {.callout-tip}
## e) Lassen Sie die Daten der Probanden ausgeben, die größer als 1,7m sind und leichter als 85kg

```{r}
#| label: LoesungAA00e
dt[Groesse > 1.7 & Kilogramm < 85]
```

:::



\smallskip\  

::: {.callout-tip}
## f) Speichern Sie Ihr `data.table`-Objekt in die Datei `groegew.csv`. Lassen Sie sich dabei zunächst anzeigen, was in die Datei geschrieben werden wird.

```{r}
#| label: LoesungAA00f
# zeige, was in die Datei gespeichert würde
fwrite(dt)
```

```{r}
#| label: LoesungAA00fb
#| eval: false
# speichere in Datei groegew.csv
fwrite(dt, "groegew.csv")

```

:::





\smallskip\  


## Lösung zur Aufgabe [-@sec-AAA01] Datentabelle {#sec-LAA01}
::: {.callout-tip}
## a) Übertragen Sie die Daten in eine `data.table` mit dem Namen `chol`.

```{r}
#| label: LoesungAA01a
# übertrage die Daten
chol <- data.table(Name = c("Anna Tomie", "Bud Zillus", "Dieter Mietenplage", 
                            "Hella Scheinwerfer", "Inge Danken", "Jason Zufall"),
                   Geschlecht = c("W", "M", "M", "W", "W", "M"),
                   Gewicht = c(85, 115, 79, 60, 57, 96),
                   Größe = c(179, 173, 181, 170, 158, 174),
                   Cholesterol = c(182, 232, 191, 200, 148, 249)
)
# anzeigen
chol
```

:::

\smallskip\  

::: {.callout-tip}
## b) Erstellen Sie eine neue Variable `Alter`, die zwischen `Name` und `Geschlecht` liegt

```{r}
#| label: LoesungAA01b

# Alter der Probanden
alter <- c(18, 32, 24, 35, 46, 68)

# Neue Spalte 'Alter' 
chol[, Alter := alter]

# Spalte 'Alter' zwischen `Name` und `Geschlecht`
setcolorder(chol, c("Name", "Alter", "Geschlecht", "Gewicht", 
                    "Größe", "Cholesterol"))

# Ausgabe der data.table
chol
```

:::

\smallskip\  

::: {.callout-tip}
## c) Fügen Sie einen weiteren Fall mit folgenden Daten dem Datenframe hinzu

```{r}
#| label: LoesungAA01c
# Neuer Fall
neu <- data.table(Name = "Mitch Mackes",
                  Alter = 44,
                  Geschlecht = "M",
                  Gewicht = 92,
                  Größe = 178,
                  Cholesterol = 220
)

# mit rbind zusammenbringen
chol <- rbind(chol, neu)

# anzeigen
chol

```

:::

\smallskip\  

::: {.callout-tip}
## d) Erzeugen Sie eine neue Variable `BMI`.

```{r}
#| label: LoesungAA01d
# BMI berechnen
chol[, BMI := Gewicht / (Größe / 100)^2]

# anzeigen
chol

```

:::

\smallskip\  

::: {.callout-tip}
## e) Fügen Sie die Variable `Adipositas` hinzu, in welcher Sie die `BMI`-Werte wie folgt klassieren

Hierzu können wir entweder die `fifelse()`-Funktion nutzen...

```{r}
#| label: LoesungAA01e1
# Klassifizieren mit fifelse
chol[, Adipositas := fifelse(BMI < 18.5, "Untergewicht",
                     fifelse(BMI >= 18.5 & BMI < 24.5, "Normalgewicht",
                     fifelse(BMI >= 24.5 & BMI <= 30, "Übergewicht", "Adipositas")))]

# anzeigen
chol
```


...oder mittels `cut()`.

```{r}
#| label: LoesungAA01e2
# Klassifizieren mit cut()
chol[, Adipositas := cut(BMI, 
                         breaks = c(-Inf, 18.5, 24.5, 30, Inf), 
                         labels = c("Untergewicht", "Normalgewicht", 
                                    "Übergewicht", "Adipositas"))]
# anzeigen
chol
```

:::

\smallskip\  

::: {.callout-tip}
## f) Filtern Sie Ihren Datensatz, so dass Sie einen neuen Datensatz `male` erhalten, welcher nur die Daten der Männer beinhaltet.


```{r}
#| label: LoesungAA01f
male <- chol[Geschlecht == "M"]

# anzeigen
male
```

:::



\smallskip\  

::: {.callout-tip}
## g) Speichern Sie die Objekte `chol` und `male` als Textdatei auf Ihre Festplatte. Lassen Sie sich dabei jeweils zuvor anzeigen, welcher Inhalt in die Textdatei geschrieben werden wird.


```{r}
#| label: LoesungAA01g
# zeige, was in chol.txt gespeichert würde
fwrite(chol)

# zeige, was in male.txt gespeichert würde
fwrite(male)
```

```{r}
#| label: LoesungAA01g2
#| eval: false
# speichere in Datei chol.txt
fwrite(chol, "chol.txt")


# speichere in Datei male.txt
fwrite(male, "male.txt")
```

:::





\smallskip\  


## Lösung zur Aufgabe [-@sec-AAA02] Big Five {#sec-LAA02}
```{r}
#| label: LoesungAA02aSETUP
#| echo: false
big5 <- fread(cmd = 'unzip -p data/big_five.zip big_five_scores.csv')
```


:::: {.callout-tip}
## a) Lesen Sie den Datensatz  `big_five_scores.csv` als `data.table` in Ihre `R`-Session.

Zunächst laden wir die Datei von  <https://www.produnis.de/tabletrainer/big_five.zip> herunter und legen sie im `data`-Ordner (siehe @sec-Vorbereitungen) ab.

Wenn Sie dies bereits getan haben und die Datei `big_five_scores.csv` bereits entpackt ist, lautet der Befehl zum Einlesen der Daten:
```{r}
#| label: LoesungAA02aDefault
#| eval: false
# lese Daten ein
big5 <- fread("data/big_five_scores.csv")
```

Wir können die Datei aber auch direkt in `R` herunterladen und entpacken.

```{r}
#| label: LoesungAA02aDownload
#| eval: false
# File herunterladen und im "data" Ordner speichern
download.file("https://www.produnis.de/tabletrainer/data/big_five.zip", 
              destfile = "data/testbig_five.zip")

# entpacken in temporäres Verzeichnis
unzip("data/big_five.zip", 
      files = "big_five_scores.csv", 
      exdir = tempdir())

# speichere Pfad auf temporäre Datei
pfad <- file.path(tempdir(), "big_five_scores.csv")
```

Der Befehl zum Einlesen aus der temporären Datei lautet
```{r}
#| label: LoesungAA02aTempEinlesen
#| eval: false
fread(pfad)
```


::: {.callout-caution appearance="minimal"}

Falls Sie das `unzip` Programm auf Ihrem PC installiert haben, können Sie direkt auf das ZIP-Paket zugreifen
```{r}
#| label: LoesungAA02aUnzip
#| eval: false
fread(cmd = 'unzip -p data/big_five.zip big_five_scores.csv')
```

Wenn das ZIP-Paket nur eine Datei enthält, muss dessen Dateiname nicht extra angegeben werden.
```{r}
#| label: LoesungAA02aUnzip2
#| eval: false
fread(cmd = 'unzip -p data/big_five.zip')
```

:::

Mit dem Datensatz vertraut machen:
```{r}
#| label: LoesungAA02astr
str(big5)
```

::::

\smallskip\  


:::: {.callout-tip}
## b) Ändern Sie die Geschlechtskodierung, so dass `männlich` und `weiblich` verwendet werden.

```{r}
#| label: LoesungAA02b
# Ändere die Geschlechtskodierung
big5[, sex := fifelse(sex == 1, "männlich", "weiblich")]

str(big5)
```

:::


\smallskip\  

:::: {.callout-tip}
## c) Passen Sie das Skalenniveau der Variablen an.

```{r}
#| label: LoesungAA02c
# case_id und country sind nominale Variablen
big5[, let(case_id = factor(case_id),
           country = factor(country),
           sex     = factor(sex)
          )]

str(big5)
```

:::

\smallskip\  


## Lösung zur Aufgabe [-@sec-AAA03] Rolling Stone Magazine {#sec-LAA03}

:::: {.callout-tip}
# a) Laden Sie die Datei `rolling_stone.csv`  als `data.table` in Ihre `R`-Session und machen Sie sich mit dem Datensatz vertraut.
```{r}
#| label: LoesungAA03SETUP
#| echo: false
rs <- fread("data/rolling_stone.csv")

```

```{r}
#| label: LoesungAA03a
#| eval: false
# falls schon gedownloadet
rs <- fread("data/rolling_stone.csv")

# per URL einlesen
rs <- fread("https://www.produnis.de/tabletrainer/data/rolling_stone.csv")
```


```{r}
#| label: LoesungAA03a2
# anschauen
str(rs)
```

::::


\smallskip\  


:::: {.callout-tip}
# b) Passen Sie das Skalenniveau der Variablen an.

Es gibt einige kategoriale Variablen im Datensatz.

```{r}
#| label: LoesungAA03b
rs[, let(sort_name = factor(sort_name),
         clean_name = factor(clean_name),
         album = factor(album),
         genre = factor(genre),
         type  = factor(type),
         artist_gender  = factor(artist_gender),
         album_id  = factor(album_id),
         spotify_url  = factor(spotify_url)
        )]

# anschauen
str(rs)
```
::::

\smallskip\  

:::: {.callout-tip}
# c) Welche sind die Nummer 1 Alben der Jahre 2003, 2012 und 2020?


```{r}
#| label: LoesungAA03c
rs[rank_2003 == 1 | rank_2012 == 1 | rank_2020 == 1,
  .(clean_name, album, rank_2003, rank_2012, rank_2020)
]
```
::::

\smallskip\  


:::: {.callout-tip}
# d) Ist Ihre Lieblingsband in der Liste?

Angenommen, meine Lieblingsband sei *Faith No More*.
```{r}
#| label: LoesungAA03d
rs[clean_name == "Faith No More"]
```
Die ist leider nicht enthalten. Versuchen wir es mit *Eminem*.

```{r}
#| label: LoesungAA03d2
rs[clean_name == "Eminem", .(clean_name, album)]
```

::::

\smallskip\  




:::: {.callout-tip}
# e) Welche weiblichen Bands haben mehr als 3 Mitglieder?

```{r}
#| label: LoesungAA03e
rs[artist_gender == "Female" & artist_member_count > 3, .(sort_name, clean_name)]
```


::::

\smallskip\  



:::: {.callout-tip}
# f) Welche Band hat die meisten Alben im Datensatz?

```{r}
#| label: LoesungAA03f
# zähle die Bands und sortiere absteigend
# und zeige nur die ersten 5 Reihen an
rs[, .N, by = clean_name] |> 
  _[order(-N)][1:5]
```
Bob Dylan und The Beatles haben jeweils 11 Alben in den Listen

::::

\smallskip\  




:::: {.callout-tip}
# g) Prüfen Sie per Korrelationsverfahren, ob die Beliebtheit bei Spotify (`spotify_popularity`) mit der Liste von 2020 übereinstimmt.

```{r}
#| label: LoesungAA03g
# Achtung, es sind NAs enthalten
rs[, cor(spotify_popularity, rank_2020, use="complete.obs")]
```

Es gibt einen geringen negativen Zusammenhang. Da beim Ranking ein *geringer* Wert für ein *gutes* Ranking steht, ist es auch nicht verwunderlich, dass der Zusammenhang negativ ist. Bei Spotify bedeutet ein *hoher* Wert ein gutes Ranking. Dennoch ist der Zusammenhang eher schwach.
::::

\smallskip\  




:::: {.callout-tip}
# h) Welchen durchschnittlichen Rang erzielen Alben des Genres "`Electronic`" in den Jahren 2003, 2012 und 2020?

```{r}
#| label: LoesungAA03h
# Achtung, es sind NAs enthalten
rs[genre == "Electronic", .(d2003 = mean(rank_2003, na.rm=TRUE),
                            d2012 = mean(rank_2012, na.rm=TRUE),
                            d2020 = mean(rank_2020, na.rm=TRUE)
                           )]
```

::::

\smallskip\  



:::: {.callout-tip}
# i) Berechnen Sie das arithmetische Mittel und den Median des Albenrankings für jedes Genre im Jahr 2020. Wieviele Alben sind pro Genre enthalten?

```{r}
#| label: LoesungAA03i
# Achtung, es sind NAs enthalten
rs[, .(mean = mean(rank_2020, na.rm=TRUE),
       median = as.numeric(median(rank_2020, na.rm=TRUE)),
       N = sum(!is.na(rank_2020))), by = genre] 
```

Haben Sie den Eintrag `Blues/Blues ROck` bemerkt? Es ist ein Tippfehler im Datensatz enthalten.

```{r}
#| label: LoesungAA03i2
# korrigiere den Tippfehler
rs[genre == "Blues/Blues ROck", genre := "Blues/Blues Rock"]
```

Jetzt sortieren wir wie gewünscht einmal absteigend nach dem Median, und einmal aufsteigend nach `genre`.

```{r}
#| label: LoesungAA03i3
# sortiert nach Median
rs[, .(mean = mean(rank_2020, na.rm=TRUE),
       median = as.numeric(median(rank_2020, na.rm=TRUE)),
       N = sum(!is.na(rank_2020))), by = genre] |> 
  _[order(median, decreasing = TRUE)]

# sortiert nach Genre
rs[, .(mean = mean(rank_2020, na.rm=TRUE),
       median = as.numeric(median(rank_2020, na.rm=TRUE)),
       N = sum(!is.na(rank_2020))), by = genre] |> 
  _[order(genre)]
```

::::

\smallskip\  



:::: {.callout-tip}
# j) Wieviele Bands sind in jeder der 3 Listen vertreten, wieviele Alben sind in jeder der 3 Listen vertreten, welche Alben ist in jeder der 3 Listen auf dem selben Platz, welche haben sich kontinuierlich verbessert, welche kontinuierlich verschlechtert?

```{r}
#| label: LoesungAA03j
# Anzahl der Bands, die in jeder der 3 Listen sind
rs[!is.na(rank_2003) & !is.na(rank_2012) & !is.na(rank_2020), 
   uniqueN(clean_name)]

# Anzahl der Alben, die in jeder der 3 Listen sind
rs[!is.na(rank_2003) & !is.na(rank_2012) & !is.na(rank_2020), 
   uniqueN(album)]

# Alben mit dem selben Ranking
rs[rank_2003 == rank_2012 & rank_2012 == rank_2020, 
   .(clean_name, album, rank_2003, rank_2012, rank_2020)]  

# Alben, die sich kontinuierlich verbessert haben
# (verbessert heisst, dass das Ranking kleiner wird)
rs[rank_2003 > rank_2012 & rank_2012 > rank_2020, 
   .(clean_name, album, rank_2003, rank_2012, rank_2020)] |>
  _[order(clean_name)] |>
  # zeige nur die ersten 10, um hier Platz zu sparen
  head(10)

# Alben, die sich kontinuierlich verschlechtert haben
# (verschlechtert heisst, dass das Ranking größer wird)
rs[rank_2003 < rank_2012 & rank_2012 < rank_2020, 
   .(clean_name, album, rank_2003, rank_2012, rank_2020)] |>
  _[order(clean_name)] |>
  # zeige nur die ersten 10, um hier Platz zu sparen
  head(10)

```
::::

\smallskip\  



:::: {.callout-tip}
# k) Der Datensatz liegt als `wide.table` vor, da das Ranking für 2003, 2012 und 2020 als Variablen nebeneinander stehen. Wandeln Sie den Datensatz in eine `long.table` (Tidy Data) um, so dass die Rankingangaben in den Variablen `Rang` und `Rangjahr` angegeben sind.

```{r}
#| label: LoesungAA03k
# long table mit melt()
long_rs <- melt(rs, 
                measure.vars = c("rank_2003", "rank_2012", "rank_2020"),
                variable.name = "Rangjahr",
                value.name = "Rang")
# anzeigen
head(long_rs)
```
::::

\smallskip\  
